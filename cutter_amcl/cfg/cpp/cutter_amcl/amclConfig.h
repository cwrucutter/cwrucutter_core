//#line 2 "/opt/ros/fuerte/stacks/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the cutter_amcl package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __cutter_amcl__AMCLCONFIG_H__
#define __cutter_amcl__AMCLCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace cutter_amcl
{
  class amclConfigStatics;
  
  class amclConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(amclConfig &config, const amclConfig &max, const amclConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const amclConfig &config1, const amclConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, amclConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const amclConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, amclConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const amclConfig &config) const = 0;
      virtual void getValue(const amclConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T amclConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (amclConfig::* field);

      virtual void clamp(amclConfig &config, const amclConfig &max, const amclConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const amclConfig &config1, const amclConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, amclConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const amclConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, amclConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const amclConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const amclConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, amclConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); i++)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;
        
        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++) 
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }
      
      virtual void updateParams(boost::any &cfg, amclConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++) 
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<amclConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(amclConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = params.begin(); i != params.end(); i++)
      {
        boost::any val;
        (*i)->getValue(config, val);

        if("min_particles"==(*i)->name){min_particles = boost::any_cast<int>(val);}
        if("max_particles"==(*i)->name){max_particles = boost::any_cast<int>(val);}
        if("kld_err"==(*i)->name){kld_err = boost::any_cast<double>(val);}
        if("kld_z"==(*i)->name){kld_z = boost::any_cast<double>(val);}
        if("update_min_d"==(*i)->name){update_min_d = boost::any_cast<double>(val);}
        if("update_min_a"==(*i)->name){update_min_a = boost::any_cast<double>(val);}
        if("resample_interval"==(*i)->name){resample_interval = boost::any_cast<int>(val);}
        if("transform_tolerance"==(*i)->name){transform_tolerance = boost::any_cast<double>(val);}
        if("recovery_alpha_slow"==(*i)->name){recovery_alpha_slow = boost::any_cast<double>(val);}
        if("recovery_alpha_fast"==(*i)->name){recovery_alpha_fast = boost::any_cast<double>(val);}
        if("gui_publish_rate"==(*i)->name){gui_publish_rate = boost::any_cast<double>(val);}
        if("save_pose_rate"==(*i)->name){save_pose_rate = boost::any_cast<double>(val);}
        if("use_map_topic"==(*i)->name){use_map_topic = boost::any_cast<bool>(val);}
        if("first_map_only"==(*i)->name){first_map_only = boost::any_cast<bool>(val);}
        if("gps_sigma"==(*i)->name){gps_sigma = boost::any_cast<double>(val);}
        if("gps_model_type"==(*i)->name){gps_model_type = boost::any_cast<std::string>(val);}
        if("odom_model_type"==(*i)->name){odom_model_type = boost::any_cast<std::string>(val);}
        if("odom_alpha1"==(*i)->name){odom_alpha1 = boost::any_cast<double>(val);}
        if("odom_alpha2"==(*i)->name){odom_alpha2 = boost::any_cast<double>(val);}
        if("odom_alpha3"==(*i)->name){odom_alpha3 = boost::any_cast<double>(val);}
        if("odom_alpha4"==(*i)->name){odom_alpha4 = boost::any_cast<double>(val);}
        if("odom_alpha5"==(*i)->name){odom_alpha5 = boost::any_cast<double>(val);}
        if("odom_frame_id"==(*i)->name){odom_frame_id = boost::any_cast<std::string>(val);}
        if("base_frame_id"==(*i)->name){base_frame_id = boost::any_cast<std::string>(val);}
        if("global_frame_id"==(*i)->name){global_frame_id = boost::any_cast<std::string>(val);}
        if("restore_defaults"==(*i)->name){restore_defaults = boost::any_cast<bool>(val);}
      }
    }

    int min_particles;
int max_particles;
double kld_err;
double kld_z;
double update_min_d;
double update_min_a;
int resample_interval;
double transform_tolerance;
double recovery_alpha_slow;
double recovery_alpha_fast;
double gui_publish_rate;
double save_pose_rate;
bool use_map_topic;
bool first_map_only;
double gps_sigma;
std::string gps_model_type;
std::string odom_model_type;
double odom_alpha1;
double odom_alpha2;
double odom_alpha3;
double odom_alpha4;
double odom_alpha5;
std::string odom_frame_id;
std::string base_frame_id;
std::string global_frame_id;
bool restore_defaults;

    bool state;
    std::string name;

    
}groups;



//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int min_particles;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int max_particles;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double kld_err;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double kld_z;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double update_min_d;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double update_min_a;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int resample_interval;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double transform_tolerance;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double recovery_alpha_slow;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double recovery_alpha_fast;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double gui_publish_rate;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double save_pose_rate;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool use_map_topic;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool first_map_only;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double gps_sigma;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string gps_model_type;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string odom_model_type;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double odom_alpha1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double odom_alpha2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double odom_alpha3;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double odom_alpha4;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double odom_alpha5;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string odom_frame_id;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string base_frame_id;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string global_frame_id;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool restore_defaults;
//#line 255 "/opt/ros/fuerte/stacks/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("amclConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const amclConfig &__max__ = __getMax__();
      const amclConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const amclConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const amclConfig &__getDefault__();
    static const amclConfig &__getMax__();
    static const amclConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const amclConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void amclConfig::ParamDescription<std::string>::clamp(amclConfig &config, const amclConfig &max, const amclConfig &min) const
  {
    return;
  }

  class amclConfigStatics
  {
    friend class amclConfig;
    
    amclConfigStatics()
    {
amclConfig::GroupDescription<amclConfig::DEFAULT, amclConfig> Default("Default", "", 0, 0, true, &amclConfig::groups);
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.min_particles = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.min_particles = 1000;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.min_particles = 100;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<int>("min_particles", "int", 0, "Minimum allowed number of particles.", "", &amclConfig::min_particles)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<int>("min_particles", "int", 0, "Minimum allowed number of particles.", "", &amclConfig::min_particles)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.max_particles = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.max_particles = 10000;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.max_particles = 5000;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<int>("max_particles", "int", 0, "Mamimum allowed number of particles.", "", &amclConfig::max_particles)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<int>("max_particles", "int", 0, "Mamimum allowed number of particles.", "", &amclConfig::max_particles)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.kld_err = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.kld_err = 1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.kld_err = 0.01;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("kld_err", "double", 0, "Maximum error between the true distribution and the estimated distribution.", "", &amclConfig::kld_err)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("kld_err", "double", 0, "Maximum error between the true distribution and the estimated distribution.", "", &amclConfig::kld_err)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.kld_z = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.kld_z = 1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.kld_z = 0.99;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("kld_z", "double", 0, "Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.", "", &amclConfig::kld_z)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("kld_z", "double", 0, "Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.", "", &amclConfig::kld_z)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.update_min_d = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.update_min_d = 5.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.update_min_d = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("update_min_d", "double", 0, "Translational movement required before performing a filter update.", "", &amclConfig::update_min_d)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("update_min_d", "double", 0, "Translational movement required before performing a filter update.", "", &amclConfig::update_min_d)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.update_min_a = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.update_min_a = 6.28318530718;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.update_min_a = 0.523598775598;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("update_min_a", "double", 0, "Rotational movement required before performing a filter update.", "", &amclConfig::update_min_a)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("update_min_a", "double", 0, "Rotational movement required before performing a filter update.", "", &amclConfig::update_min_a)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.resample_interval = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.resample_interval = 20;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.resample_interval = 2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<int>("resample_interval", "int", 0, "Number of filter updates required before resampling.", "", &amclConfig::resample_interval)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<int>("resample_interval", "int", 0, "Number of filter updates required before resampling.", "", &amclConfig::resample_interval)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.transform_tolerance = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.transform_tolerance = 2.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.transform_tolerance = 0.1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("transform_tolerance", "double", 0, "Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.", "", &amclConfig::transform_tolerance)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("transform_tolerance", "double", 0, "Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.", "", &amclConfig::transform_tolerance)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.recovery_alpha_slow = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.recovery_alpha_slow = 0.5;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.recovery_alpha_slow = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("recovery_alpha_slow", "double", 0, "Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.", "", &amclConfig::recovery_alpha_slow)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("recovery_alpha_slow", "double", 0, "Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.", "", &amclConfig::recovery_alpha_slow)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.recovery_alpha_fast = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.recovery_alpha_fast = 1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.recovery_alpha_fast = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("recovery_alpha_fast", "double", 0, "Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.", "", &amclConfig::recovery_alpha_fast)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("recovery_alpha_fast", "double", 0, "Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.", "", &amclConfig::recovery_alpha_fast)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.gui_publish_rate = -1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.gui_publish_rate = 100.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.gui_publish_rate = -1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("gui_publish_rate", "double", 0, "Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.", "", &amclConfig::gui_publish_rate)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("gui_publish_rate", "double", 0, "Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.", "", &amclConfig::gui_publish_rate)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.save_pose_rate = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.save_pose_rate = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.save_pose_rate = 0.5;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("save_pose_rate", "double", 0, "Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable.", "", &amclConfig::save_pose_rate)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("save_pose_rate", "double", 0, "Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable.", "", &amclConfig::save_pose_rate)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.use_map_topic = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.use_map_topic = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.use_map_topic = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<bool>("use_map_topic", "bool", 0, "When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.", "", &amclConfig::use_map_topic)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<bool>("use_map_topic", "bool", 0, "When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.", "", &amclConfig::use_map_topic)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.first_map_only = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.first_map_only = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.first_map_only = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<bool>("first_map_only", "bool", 0, "When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.", "", &amclConfig::first_map_only)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<bool>("first_map_only", "bool", 0, "When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.", "", &amclConfig::first_map_only)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.gps_sigma = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.gps_sigma = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.gps_sigma = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("gps_sigma", "double", 0, "Standard deviation for Gaussian model used in gps model.", "", &amclConfig::gps_sigma)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("gps_sigma", "double", 0, "Standard deviation for Gaussian model used in gps model.", "", &amclConfig::gps_sigma)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.gps_model_type = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.gps_model_type = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.gps_model_type = "leverarm";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("gps_model_type", "str", 0, "Which model to use, only leverarm.", "{'enum_description': 'GPS Models', 'enum': [{'srcline': 35, 'description': 'Use leverarm GPS model', 'srcfile': '../cfg/cutter_amcl.cfg', 'cconsttype': 'const char * const', 'value': 'leverarm', 'ctype': 'std::string', 'type': 'str', 'name': 'leverarm_const'}]}", &amclConfig::gps_model_type)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("gps_model_type", "str", 0, "Which model to use, only leverarm.", "{'enum_description': 'GPS Models', 'enum': [{'srcline': 35, 'description': 'Use leverarm GPS model', 'srcfile': '../cfg/cutter_amcl.cfg', 'cconsttype': 'const char * const', 'value': 'leverarm', 'ctype': 'std::string', 'type': 'str', 'name': 'leverarm_const'}]}", &amclConfig::gps_model_type)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_model_type = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_model_type = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_model_type = "diff";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("odom_model_type", "str", 0, "Which model to use, either diff or omni", "{'enum_description': 'Odom Models', 'enum': [{'srcline': 39, 'description': 'Use diff odom model', 'srcfile': '../cfg/cutter_amcl.cfg', 'cconsttype': 'const char * const', 'value': 'diff', 'ctype': 'std::string', 'type': 'str', 'name': 'diff_const'}, {'srcline': 39, 'description': 'Use omni odom model', 'srcfile': '../cfg/cutter_amcl.cfg', 'cconsttype': 'const char * const', 'value': 'omni', 'ctype': 'std::string', 'type': 'str', 'name': 'omni_const'}]}", &amclConfig::odom_model_type)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("odom_model_type", "str", 0, "Which model to use, either diff or omni", "{'enum_description': 'Odom Models', 'enum': [{'srcline': 39, 'description': 'Use diff odom model', 'srcfile': '../cfg/cutter_amcl.cfg', 'cconsttype': 'const char * const', 'value': 'diff', 'ctype': 'std::string', 'type': 'str', 'name': 'diff_const'}, {'srcline': 39, 'description': 'Use omni odom model', 'srcfile': '../cfg/cutter_amcl.cfg', 'cconsttype': 'const char * const', 'value': 'omni', 'ctype': 'std::string', 'type': 'str', 'name': 'omni_const'}]}", &amclConfig::odom_model_type)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_alpha1 = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_alpha1 = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_alpha1 = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha1", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.", "", &amclConfig::odom_alpha1)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha1", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.", "", &amclConfig::odom_alpha1)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_alpha2 = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_alpha2 = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_alpha2 = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha2", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.", "", &amclConfig::odom_alpha2)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha2", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.", "", &amclConfig::odom_alpha2)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_alpha3 = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_alpha3 = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_alpha3 = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha3", "double", 0, "Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.", "", &amclConfig::odom_alpha3)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha3", "double", 0, "Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.", "", &amclConfig::odom_alpha3)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_alpha4 = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_alpha4 = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_alpha4 = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha4", "double", 0, "Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.", "", &amclConfig::odom_alpha4)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha4", "double", 0, "Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.", "", &amclConfig::odom_alpha4)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_alpha5 = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_alpha5 = 10.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_alpha5 = 0.2;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha5", "double", 0, "Translation-related noise parameter (only used if model is omni).", "", &amclConfig::odom_alpha5)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<double>("odom_alpha5", "double", 0, "Translation-related noise parameter (only used if model is omni).", "", &amclConfig::odom_alpha5)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.odom_frame_id = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.odom_frame_id = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.odom_frame_id = "odom";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("odom_frame_id", "str", 0, "Which frame to use for odometry.", "", &amclConfig::odom_frame_id)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("odom_frame_id", "str", 0, "Which frame to use for odometry.", "", &amclConfig::odom_frame_id)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.base_frame_id = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.base_frame_id = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.base_frame_id = "base_link";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("base_frame_id", "str", 0, "Which frame to use for the robot base.", "", &amclConfig::base_frame_id)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("base_frame_id", "str", 0, "Which frame to use for the robot base.", "", &amclConfig::base_frame_id)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.global_frame_id = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.global_frame_id = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.global_frame_id = "map";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("global_frame_id", "str", 0, "The name of the coordinate frame published by the localization system.", "", &amclConfig::global_frame_id)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<std::string>("global_frame_id", "str", 0, "The name of the coordinate frame published by the localization system.", "", &amclConfig::global_frame_id)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.restore_defaults = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.restore_defaults = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.restore_defaults = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<bool>("restore_defaults", "bool", 0, "Retsore the default configuration", "", &amclConfig::restore_defaults)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(amclConfig::AbstractParamDescriptionConstPtr(new amclConfig::ParamDescription<bool>("restore_defaults", "bool", 0, "Retsore the default configuration", "", &amclConfig::restore_defaults)));
//#line 233 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.convertParams();
//#line 233 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(amclConfig::AbstractGroupDescriptionConstPtr(new amclConfig::GroupDescription<amclConfig::DEFAULT, amclConfig>(Default)));
//#line 390 "/opt/ros/fuerte/stacks/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<amclConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<amclConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<amclConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    amclConfig __max__;
    amclConfig __min__;
    amclConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const amclConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static amclConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &amclConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const amclConfig &amclConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const amclConfig &amclConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const amclConfig &amclConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<amclConfig::AbstractParamDescriptionConstPtr> &amclConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<amclConfig::AbstractGroupDescriptionConstPtr> &amclConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const amclConfigStatics *amclConfig::__get_statics__()
  {
    const static amclConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = amclConfigStatics::get_instance();
    
    return statics;
  }

//#line 35 "../cfg/cutter_amcl.cfg"
      const char * const amcl_leverarm_const = "leverarm";
//#line 39 "../cfg/cutter_amcl.cfg"
      const char * const amcl_diff_const = "diff";
//#line 39 "../cfg/cutter_amcl.cfg"
      const char * const amcl_omni_const = "omni";
}

#endif // __AMCLRECONFIGURATOR_H__
